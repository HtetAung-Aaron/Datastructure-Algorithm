#include <iostream>
using namespace std;

class Node{

public:
    int key;
    Node*left,*right = NULL;
    int height;

};

// to determine the height of the Node(tree)

int height(Node*N){

    if (N==NULL)
        return 0;

    return N->height;
}


// if else condition (if conditon is true,take 1st variable ,
//                    if not, take 2nd variable)

int max(int a, int b){

    return (a>b) ? a:b ;

}

//Creating a new Node
// node->data = NULL
// left,right = NULL
// height = 1

Node*newNode(int key){

    Node*node = new Node();
    node->key = key;
    node->right=NULL;
    node->left = NULL;
    node->height = 1;

    return node;

}

// rotate right
// 2 variable then swap each other

Node*rightRotate(Node*y){

    Node*x = y->left;
    Node*T2 = x->right;
    x->right=y;
    y->left= T2;
    y->height = max(height(y->left),height(y->right))+1;
    x->height = max(height(x->left),height(x->right))+1;

    return x;
}

// rotate left
// 2 variable then swap each other

Node*leftRotate(Node*x){

    Node*y = x->right;
    Node*T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left),height(x->right))+1;
    y->height = max(height(y->left), height(y->right))+1;

    return y;

}

// to determine balacefactor
// leftheight - rightheight >= 1 (equation)

int getBalanceFactor(Node*N){

    if(N==NULL)
        return 0;

    return height(N->left)- height(N->right);
}

// insert Node into tree
// node== NULL => root
// recursive left or right 
// height of the each nodes

Node*insertNode(Node*node,int key){

    if (node==NULL)
        return (newNode(key));
    if (key < node->key)
        node->left = insertNode(node->left,key);
    if (key > node->key)
        node->right = insertNode(node->right,key);
    else
        return node;

    node->height = 1+ max(height(node->left), height(node->right));

    int balanceFactor = getBalanceFactor(node);
    if (balanceFactor>1){
        if (key < node->left->key)
            return rightRotate(node);
        else if (key > node->left->key)
            node->left = leftRotate(node->left);
            return rightRotate(node);

    }
    if (balanceFactor<1){
        if (key < node->right->key)
            return leftRotate(node);
        else if (key > node->right->key)
            node->right = rightRotate(node->right);
        return leftRotate(node);

    }

    return node;

}


// printing the tree

void printTree(Node*root,string indent,bool last){
    if (root != nullptr) {
        cout << indent;
        if (last) {
            cout << "R----";
            indent += "   ";
        } else {
            cout << "L----";
            indent += "|  ";
        }
        cout << root->key << endl;
        printTree(root->left, indent, false);
        printTree(root->right, indent, true);
    }

}

int main() {

    Node*root = NULL;
    root = insertNode(root,33);
    root = insertNode(root,13);
    root = insertNode(root,53);
    root = insertNode(root,9);
    root = insertNode(root,21);
    root = insertNode(root,61);
    root = insertNode(root,8);
    root = insertNode(root,11);


    printTree(root," ", true);



    return 0;
}
